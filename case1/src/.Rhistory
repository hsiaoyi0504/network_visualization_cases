# keytypes(org.Hs.eg.db)
#!/usr/bin/env RScript
# source("https://bioconductor.org/biocLite.R")
# biocLite("topGO")
# biocLite("ALL")
# biocLite("clusterProfiler")
# biocLite("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
con <- file("../data/spectral-counts.target.txt","r")
proteinList <- vector()
line <- readLines(con, n=1)
while(TRUE){
line <- readLines(con, n=1)
if( length(line) == 0 ){
break
}
line <- unlist(strsplit(line, "\t", fixed = TRUE))
line <- line[1]
line <- unlist(strsplit(line, "|", fixed = TRUE))
line <- line[2]
proteinList <- append(proteinList,line)
}
yy <- enrichGO(proteinList,"org.Hs.eg.db",keytype="UNIPROT",pvalueCutoff=0.01,ont="MF")
head(summary(yy))
# eg = bitr(proteinList, fromType="UNIPROT", toType="GO", OrgDb="org.Hs.eg.db")
# print(eg)
# keytypes(org.Hs.eg.db)
#!/usr/bin/env RScript
# source("https://bioconductor.org/biocLite.R")
# biocLite("topGO")
# biocLite("ALL")
# biocLite("clusterProfiler")
# biocLite("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
con <- file("../data/spectral-counts.target.txt","r")
proteinList <- vector()
line <- readLines(con, n=1)
while(TRUE){
line <- readLines(con, n=1)
if( length(line) == 0 ){
break
}
line <- unlist(strsplit(line, "\t", fixed = TRUE))
line <- line[1]
line <- unlist(strsplit(line, "|", fixed = TRUE))
line <- line[2]
proteinList <- append(proteinList,line)
}
yy <- enrichGO(proteinList,"org.Hs.eg.db",keytype="UNIPROT",pvalueCutoff=0.01,ont="MF")
head(summary(yy))
# eg = bitr(proteinList, fromType="UNIPROT", toType="GO", OrgDb="org.Hs.eg.db")
# print(eg)
# keytypes(org.Hs.eg.db)
setwd
rbind
source
setwd("/Users/yihsiao/Documents/workspace/test_network_visualization/src")
# source("https://bioconductor.org/biocLite.R")
# biocLite("topGO")
# biocLite("ALL")
# biocLite("clusterProfiler")
# biocLite("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
con <- file("../data/spectral-counts.target.txt","r")
proteinList <- vector()
line <- readLines(con, n=1)
while(TRUE){
line <- readLines(con, n=1)
if( length(line) == 0 ){
break
}
line <- unlist(strsplit(line, "\t", fixed = TRUE))
line <- line[1]
line <- unlist(strsplit(line, "|", fixed = TRUE))
line <- line[2]
proteinList <- append(proteinList,line)
}
yy <- enrichGO(proteinList,"org.Hs.eg.db",keytype="UNIPROT",pvalueCutoff=0.01,ont="MF")
head(summary(yy))
# eg = bitr(proteinList, fromType="UNIPROT", toType="GO", OrgDb="org.Hs.eg.db")
# print(eg)
# keytypes(org.Hs.eg.db)
yy
setwd("~/Documents/workspace/test_network_visualization/src")
#!/usr/bin/env RScript
# source("https://bioconductor.org/biocLite.R")
# biocLite("topGO")
# biocLite("ALL")
# biocLite("clusterProfiler")
# biocLite("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
con <- file("../data/spectral-counts.target.txt","r")
proteinList <- vector()
line <- readLines(con, n=1)
while(TRUE){
line <- readLines(con, n=1)
if( length(line) == 0 ){
break
}
line <- unlist(strsplit(line, "\t", fixed = TRUE))
line <- line[1]
line <- unlist(strsplit(line, "|", fixed = TRUE))
line <- line[2]
proteinList <- append(proteinList,line)
}
yy <- enrichGO(gene=proteinList,OrgDb="org.Hs.eg.db",keytype="UNIPROT",pvalueCutoff=0.01,ont="MF")
head(summary(yy))
# eg = bitr(proteinList, fromType="UNIPROT", toType="GO", OrgDb="org.Hs.eg.db")
# print(eg)
# keytypes(org.Hs.eg.db)
yy
yy.geneID
yy@gene
yy@geneID
yy
yy@result
yy@pvalueCutoff
yy@gene
yy@result
View(yy@result)
df = yy@result
View(df)
View(df)
View(df)
#!/usr/bin/env RScript
# source("https://bioconductor.org/biocLite.R")
# biocLite("topGO")
# biocLite("ALL")
# biocLite("clusterProfiler")
# biocLite("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
con <- file("../data/spectral-counts.target.txt","r")
proteinList <- vector()
line <- readLines(con, n=1)
while(TRUE){
line <- readLines(con, n=1)
if( length(line) == 0 ){
break
}
line <- unlist(strsplit(line, "\t", fixed = TRUE))
line <- line[1]
line <- unlist(strsplit(line, "|", fixed = TRUE))
line <- line[2]
proteinList <- append(proteinList,line)
}
enrichmentGO <- enrichGO(gene=proteinList,OrgDb="org.Hs.eg.db",keytype="UNIPROT",pvalueCutoff=0.01,ont="MF")
# eg = bitr(proteinList, fromType="UNIPROT", toType="GO", OrgDb="org.Hs.eg.db")
# print(eg)
# keytypes(org.Hs.eg.db)
enrichmentGO@result
enrichmentGO@result
View(df)
View(df)
a= "a"
b= "b"
a+b
paste(a,b)
paste(a,b,sep="")
