<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <link rel="stylesheey" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.11/css/dataTables.bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.11/css/jquery.dataTables.min.css">
    <script src="https://code.jquery.com/jquery-1.12.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.11/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.11/js/dataTables.bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/2.6.8/cytoscape.js"></script>
  </head>
  <body>
    <div class="container">
      <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4" id="control">
        <table id="proteinTable" class="table table-striped table-bordered table-condensed"></table>
      </div>
      <div class="col-xs-8 col-sm-8 col-md-8 col-lg-8">
        <div id="cy"></div>
        <i class="fa fa-refresh" id="refresh" aria-hidden="true"></i>
        <i class="fa fa-expand" id="expand" aria-hidden="true"></i>
        <i class="fa fa-compress" id="compress" aria-hidden="true"></i>
      </div>
    </div>
    <script type="text/javascript">
        var elements = <%- JSON.stringify(elements) %>;
        var cy = cytoscape({
            container: document.getElementById('cy'), // container to render in
            style: [ // the stylesheet for the graph
                {
                  selector: 'node',
                  style: {
                    'background-color': '#666',
                    'shape': 'data(faveShape)',
                    'background-color': 'data(faveColor)',
                    'content': 'data(name)',
                    'text-valign': 'center'
                  }
                },
                {
                  selector: 'edge',
                  style: {
                    'curve-style': 'beizer',
                    'width': 3,
                    'line-color': '#ccc',
                    'target-arrow-color': '#ccc',
                    'target-arrow-shape': 'triangle'
                  }
                },
                {
                  selector: ':selected',
                  style: {
                    'background-color': 'yellow'
                  } 
                },{
                  selector: '.node-selected-TF',
                  style: {
                    'background-color': 'blue'
                  }
                },{
                  selector: '.node-selected-gene',
                  style: {
                    'background-color': 'red'
                  }
                },
                {
                  selector: '.edge-selected',
                  style: {
                    'line-color': 'black',
                    'target-arrow-color': 'black',
                  }
                },{
                  selector: '.faded',
                  style: {
                    'opacity':0.25,
                    'text-opacity':0
                  }
                }
            ],
            boxSelectionEnabled: true,
            selectionType: 'single'
        });
        var faveShape;
        for(var i=0;i<elements.nodes.length;i++){
            if(elements.nodes[i].data.Tag==="TF"){
                faveShape = 'octagon';
            }else{
                faveShape = 'rectangle'; 
            }
            if(elements.nodes[i].data.DEG===""){
                faveColor = 'gainsboro';
            }else{
                faveColor = 'pink';
            }
            cy.add([
                {group: 'nodes', data: { id:elements.nodes[i].data.id, name:elements.nodes[i].data.name, faveShape: faveShape, faveColor: faveColor, Tag: elements.nodes[i].data.Tag, DEG: elements.nodes[i].data.DEG }, position: { x:elements.nodes[i].position.x , y:elements.nodes[i].position.y } }
            ]);
        }
        for(var i=0;i<elements.edges.length;i++){
          cy.add([
            {group: 'edges', data: {id: elements.edges[i].data.id, name: elements.edges[i].data.name, source: elements.edges[i].data.source, target: elements.edges[i].data.target, interaction:elements.edges[i].data.interaction } }
          ]);
        }
        cy.fit();
        var isClickedOn = false;
        cy.on('tap',function(e){
            console.log(e.cyTarget._private);
            if(isClickedOn){
                cy.elements().removeClass('edge-selected');
                cy.elements().removeClass('node-selected-TF');
                cy.elements().removeClass('node-selected-gene');
                cy.elements().removeClass('faded');
                isClickedOn = false;
            }
            if(e.cyTarget!==cy){
                if(e.cyTarget._private.group=='nodes'){
                    isClickedOn = true;
                    cy.elements('edge').addClass('faded');
                    if(e.cyTarget.data().Tag==='TF'){
                        e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "Gene" ]')).removeClass('faded');
                        e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "TF" ]')).removeClass('faded');
                        e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "Gene" ]')).addClass('edge-selected');
                        e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "TF" ]')).addClass('edge-selected');
                        e.cyTarget.neighborhood('node[Tag = "Gene" ]').addClass('node-selected-gene');
                        e.cyTarget.neighborhood('node[Tag = "TF" ]').addClass('node-selected-TF');
                    }
                    else{
                        e.cyTarget.edgesWith(e.cyTarget.neighborhood('node').addClass('node-selected-TF')).removeClass('faded');
                        e.cyTarget.edgesWith(e.cyTarget.neighborhood('node').addClass('node-selected-TF')).addClass('edge-selected');
                        e.cyTarget.neighborhood('node').addClass('node-selected-TF');               
                    }
                }
            }
        });

    </script>
  </body>
</html>