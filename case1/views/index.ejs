<html>
  <head>
    <title><%= title %></title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css">
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.12/css/dataTables.bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/scroller/1.4.2/css/scroller.bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="css/style.css">
    <script src="//code.jquery.com/jquery-1.12.3.js"></script>
    <script src="https://cdn.datatables.net/1.10.12/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.12/js/dataTables.bootstrap.min.js"></script>
    <script src="https://cdn.datatables.net/scroller/1.4.2/js/dataTables.scroller.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/2.6.8/cytoscape.js"></script>
  </head>
  <body>
    <div class="container">
        <div class="row"> 
            <div class="col-xs-4">
                <table id="geneTable" class="table table-striped table-bordered table-condensed"></table>
            </div>
            <div class="col-xs-8">
                <div id="cy"></div>
            </div>
        </div>
    <!--    
            <i class="fa fa-refresh" id="refresh" aria-hidden="true"></i>
            <i class="fa fa-expand" id="expand" aria-hidden="true"></i>
            <i class="fa fa-compress" id="compress" aria-hidden="true"></i> 
    -->
    </div>
    <script type="text/javascript">
        var elements = <%- JSON.stringify(elements) %>;
        var cy = cytoscape({
            container: document.getElementById('cy'), // container to render in
            style: [ // the stylesheet for the graph
                {
                  selector: 'node',
                  style: {
                    'shape': 'data(faveShape)',
                    'background-color': 'data(faveColor)',
                    'color': 'data(textColor)',
                    'content': 'data(name)',
                    'text-valign': 'center',
                    'width': 60
                  }
                },
                {
                  selector: 'edge',
                  style: {
                    'curve-style': 'beizer',
                    'width': 3,
                    'line-color': '#ccc',
                    'target-arrow-color': '#ccc',
                    'target-arrow-shape': 'triangle'
                  }
                },
                {
                  selector: ':selected',
                  style: {
                    'background-color': 'yellow',
                    'color': 'black'
                  } 
                },{
                  selector: '.node-selected-TF',
                  style: {
                    'background-color': 'blue'
                  }
                },{
                  selector: '.node-selected-gene',
                  style: {
                    'background-color': 'red'
                  }
                },
                {
                  selector: '.edge-selected',
                  style: {
                    'line-color': 'black',
                    'target-arrow-color': 'black',
                  }
                },{
                  selector: '.faded',
                  style: {
                    'opacity':0.25,
                    'text-opacity':0
                  }
                }
            ],
            boxSelectionEnabled: true,
            selectionType: 'single'
        });
        var faveShape, textColor;
        for(var i=0;i<elements.nodes.length;i++){
            if(elements.nodes[i].data.Tag==="TF"){
                faveShape = 'octagon';
            }else{
                faveShape = 'rectangle'; 
            }
            if(elements.nodes[i].data.DEG===""){
                faveColor = 'dimgray';
                textColor = 'white';
            }else{
                faveColor = 'pink';
                textColor = 'black';
            }
            cy.add([
                {group: 'nodes', data: { id:elements.nodes[i].data.id, name:elements.nodes[i].data.name, faveShape: faveShape, faveColor: faveColor, textColor: textColor ,Tag: elements.nodes[i].data.Tag, DEG: elements.nodes[i].data.DEG }, position: { x:elements.nodes[i].position.x , y:elements.nodes[i].position.y } }
            ]);
        }
        for(var i=0;i<elements.edges.length;i++){
          cy.add([
            {group: 'edges', data: {id: elements.edges[i].data.id, name: elements.edges[i].data.name, source: elements.edges[i].data.source, target: elements.edges[i].data.target, interaction:elements.edges[i].data.interaction } }
          ]);
        }
        cy.fit();
        var isClickedOn = false;
        
        $(document).ready(function() {
            var data =[];
            for(var i=0; i<elements.nodes.length;i++){
                if(elements.nodes[i].data.DEG===""){
                    data.push([ elements.nodes[i].data.name, elements.nodes[i].data.Degree, elements.nodes[i].data.Tag, "No", elements.nodes[i].data.id ]);
                }else{
                    data.push([ elements.nodes[i].data.name, elements.nodes[i].data.Degree, elements.nodes[i].data.Tag, "Yes", elements.nodes[i].data.id ]);   
                }
            }
            var table = $('#geneTable').DataTable( {
                data: data,
                columns: [
                    { title: "Gene Name" },
                    { title: "Number of Interaction Parts" },
                    { title: "TF/Gene"},
                    { title: "Differential Expression Gene"},
                    { title: "ID", visible: false}
                ],
                // scrollX: true,
                "scrollY": "70vh",
                "scrollCollapse": true,
                order: [[ 1, "desc" ]],
                lengthMenu: [[12,100,150,-1],[12,100,150,'All']],
                paging: false
            } );

            $('#geneTable tbody').on( 'click', 'tr', function () {
                temp = table.rows(this).data();
                if ( $(this).hasClass('selected') ) {
                    $(this).toggleClass('selected');
                    // cy.$(':selected').json({'background-color': ,});
                    cy.$(':selected').unselect();
                    cy.elements().removeClass('edge-selected');
                    cy.elements().removeClass('node-selected-TF');
                    cy.elements().removeClass('node-selected-gene');
                    cy.elements().removeClass('faded');
                    isClickedOn = false;
                }else{
                    cy.elements().removeClass('edge-selected');
                    cy.elements().removeClass('node-selected-TF');
                    cy.elements().removeClass('node-selected-gene');
                    cy.elements().removeClass('faded');
                    cy.$(':selected').unselect();
                    isClickedOn = true;
                    table.$('tr.selected').toggleClass('selected');
                    $(this).toggleClass('selected');
                    cy.getElementById(temp[0][4]).select();
                    cy.elements('edge').addClass('faded');
                    if(temp[0][2]==='TF'){
                        cy.getElementById(temp[0][4]).edgesWith(cy.getElementById(temp[0][4]).neighborhood('node[Tag = "Gene" ]')).removeClass('faded');
                        cy.getElementById(temp[0][4]).edgesWith(cy.getElementById(temp[0][4]).neighborhood('node[Tag = "TF" ]')).removeClass('faded');
                        cy.getElementById(temp[0][4]).edgesWith(cy.getElementById(temp[0][4]).neighborhood('node[Tag = "Gene" ]')).addClass('edge-selected');
                        cy.getElementById(temp[0][4]).edgesWith(cy.getElementById(temp[0][4]).neighborhood('node[Tag = "TF" ]')).addClass('edge-selected');
                        cy.getElementById(temp[0][4]).neighborhood('node[Tag = "Gene" ]').addClass('node-selected-gene');
                        cy.getElementById(temp[0][4]).neighborhood('node[Tag = "TF" ]').addClass('node-selected-TF');
                    }else{
                        cy.getElementById(temp[0][4]).edgesWith(cy.getElementById(temp[0][4]).neighborhood('node')).removeClass('faded');
                        cy.getElementById(temp[0][4]).edgesWith(cy.getElementById(temp[0][4]).neighborhood('node')).addClass('edge-selected');
                        cy.getElementById(temp[0][4]).neighborhood('node').addClass('node-selected-TF');  
                    }
                }
            } );
            var indexes;
            cy.on('tap',function(e){
                if(isClickedOn){
                    cy.elements().removeClass('edge-selected');
                    cy.elements().removeClass('node-selected-TF');
                    cy.elements().removeClass('node-selected-gene');
                    cy.elements().removeClass('faded');
                    isClickedOn = false;
                }
                if(e.cyTarget!==cy){
                    // console.log(e.cyTarget.data());
                    if(e.cyTarget._private.group=='nodes'){
                        table.$('tr.selected').toggleClass('selected');
                        isClickedOn = true;
                        cy.elements('edge').addClass('faded');
                        if(e.cyTarget.data().Tag==='TF'){
                            e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "Gene" ]')).removeClass('faded');
                            e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "TF" ]')).removeClass('faded');
                            e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "Gene" ]')).addClass('edge-selected');
                            e.cyTarget.edgesWith(e.cyTarget.neighborhood('node[Tag = "TF" ]')).addClass('edge-selected');
                            e.cyTarget.neighborhood('node[Tag = "Gene" ]').addClass('node-selected-gene');
                            e.cyTarget.neighborhood('node[Tag = "TF" ]').addClass('node-selected-TF');
                        }
                        else{
                            e.cyTarget.edgesWith(e.cyTarget.neighborhood('node')).removeClass('faded');
                            e.cyTarget.edgesWith(e.cyTarget.neighborhood('node')).addClass('edge-selected');
                            e.cyTarget.neighborhood('node').addClass('node-selected-TF');
                        }
                        //select table
                        indexes = table.rows().eq( 0 ).filter( function (rowIdx) {
                              return table.cell( rowIdx, 0 ).data() === e.cyTarget.data().name ? true : false;
                          } );
                        table.rows(indexes).nodes().to$().toggleClass('selected');
                        // console.log(indexes[0]);
                        $(".dataTables_scrollBody").scrollTop(22*(indexes[0]+1));
                    }else{
                        table.$('tr.selected').toggleClass('selected');
                    }
                }else{
                    table.$('tr.selected').toggleClass('selected');
                }
            });
        } );
    </script>
  </body>
</html>